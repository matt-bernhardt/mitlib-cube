name: PHP Composer

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Validate composer.json and composer.lock
      run: composer validate --strict

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v2
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: Install NPM packages
      run: npm install

    # Add a test script to composer.json, for instance: "test": "vendor/bin/phpunit"
    # Docs: https://getcomposer.org/doc/articles/scripts.md
    # - name: Run test suite
    #   run: composer run-script test
    # This approach could also be used if we adopt Robo for our build, rather than Grunt

    - name: Run Grunt steps                     # 2b. The rest of the build after Sass happens through Grunt (see
                                                #     Gruntfile.js)
      run: grunt default

    - name: DEBUG inspect build output          # At this point, the build is complete. We just need to get the
                                                # output into a state that can be distributed.
                                                # The next few steps confirm that we've built what we expect (the
                                                # stylesheet should have branch information, and there should be built
                                                # css and js files)
      run: git status
    - name: DEBUG confirm git branch/commit in stylesheet
      run: head style.css

    - name: Store build result as an artifact   # At the end of the build process, we store those files needed for
                                                # use (templates, stylesheets, scripts, images, etc) as an artifact.
                                                # That artifact will be retrieved and committed to the release
                                                # branch below.
      uses: actions/upload-artifact@v2
      with:
        name: build-artifact
        path: |
          css
          fonts
          images
          inc
          js
          composer.json
          license.txt
          *.css
          *.php
          *.png
          *.html

  development_release:
    needs: build                                  # This takes the build output from build_assets, commits it on a
                                                  # separate `tesseract` branch, and tags that as a pre-release (which
                                                  # should be enough for the result to be picked up by Composer).
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: tesseract
      - name: DEBUG confirm our place in git tree
        run: git log --oneline --decorate --graph --all
      - name: Retrieve build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifact
      - name: Stage changed files for commit
        run: |
          git config --local user.email 'action@github.com'
          git config --local user.name 'GitHub Action'
          git add .
      - name: DEBUG Confirm scope of changes to dev-release
        run: git status
      - name: Commit changes                      # TODO - could we get a better commit message?
        run: |
          git commit -m 'Updates theme including compiled assets'
